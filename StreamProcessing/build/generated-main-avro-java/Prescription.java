/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Prescription extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5638757502642057267L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Prescription\",\"fields\":[{\"name\":\"firstname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"cip\",\"type\":\"int\"},{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"idPharma\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Prescription> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Prescription> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Prescription> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Prescription> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Prescription> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Prescription to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Prescription from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Prescription instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Prescription fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String firstname;
  private java.lang.String lastname;
  private int cip;
  private double price;
  private int idPharma;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Prescription() {}

  /**
   * All-args constructor.
   * @param firstname The new value for firstname
   * @param lastname The new value for lastname
   * @param cip The new value for cip
   * @param price The new value for price
   * @param idPharma The new value for idPharma
   */
  public Prescription(java.lang.String firstname, java.lang.String lastname, java.lang.Integer cip, java.lang.Double price, java.lang.Integer idPharma) {
    this.firstname = firstname;
    this.lastname = lastname;
    this.cip = cip;
    this.price = price;
    this.idPharma = idPharma;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return firstname;
    case 1: return lastname;
    case 2: return cip;
    case 3: return price;
    case 4: return idPharma;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: firstname = value$ != null ? value$.toString() : null; break;
    case 1: lastname = value$ != null ? value$.toString() : null; break;
    case 2: cip = (java.lang.Integer)value$; break;
    case 3: price = (java.lang.Double)value$; break;
    case 4: idPharma = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'firstname' field.
   * @return The value of the 'firstname' field.
   */
  public java.lang.String getFirstname() {
    return firstname;
  }


  /**
   * Sets the value of the 'firstname' field.
   * @param value the value to set.
   */
  public void setFirstname(java.lang.String value) {
    this.firstname = value;
  }

  /**
   * Gets the value of the 'lastname' field.
   * @return The value of the 'lastname' field.
   */
  public java.lang.String getLastname() {
    return lastname;
  }


  /**
   * Sets the value of the 'lastname' field.
   * @param value the value to set.
   */
  public void setLastname(java.lang.String value) {
    this.lastname = value;
  }

  /**
   * Gets the value of the 'cip' field.
   * @return The value of the 'cip' field.
   */
  public int getCip() {
    return cip;
  }


  /**
   * Sets the value of the 'cip' field.
   * @param value the value to set.
   */
  public void setCip(int value) {
    this.cip = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public double getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'idPharma' field.
   * @return The value of the 'idPharma' field.
   */
  public int getIdPharma() {
    return idPharma;
  }


  /**
   * Sets the value of the 'idPharma' field.
   * @param value the value to set.
   */
  public void setIdPharma(int value) {
    this.idPharma = value;
  }

  /**
   * Creates a new Prescription RecordBuilder.
   * @return A new Prescription RecordBuilder
   */
  public static Prescription.Builder newBuilder() {
    return new Prescription.Builder();
  }

  /**
   * Creates a new Prescription RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Prescription RecordBuilder
   */
  public static Prescription.Builder newBuilder(Prescription.Builder other) {
    if (other == null) {
      return new Prescription.Builder();
    } else {
      return new Prescription.Builder(other);
    }
  }

  /**
   * Creates a new Prescription RecordBuilder by copying an existing Prescription instance.
   * @param other The existing instance to copy.
   * @return A new Prescription RecordBuilder
   */
  public static Prescription.Builder newBuilder(Prescription other) {
    if (other == null) {
      return new Prescription.Builder();
    } else {
      return new Prescription.Builder(other);
    }
  }

  /**
   * RecordBuilder for Prescription instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Prescription>
    implements org.apache.avro.data.RecordBuilder<Prescription> {

    private java.lang.String firstname;
    private java.lang.String lastname;
    private int cip;
    private double price;
    private int idPharma;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Prescription.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.firstname)) {
        this.firstname = data().deepCopy(fields()[0].schema(), other.firstname);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.lastname)) {
        this.lastname = data().deepCopy(fields()[1].schema(), other.lastname);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.cip)) {
        this.cip = data().deepCopy(fields()[2].schema(), other.cip);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.idPharma)) {
        this.idPharma = data().deepCopy(fields()[4].schema(), other.idPharma);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Prescription instance
     * @param other The existing instance to copy.
     */
    private Builder(Prescription other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.firstname)) {
        this.firstname = data().deepCopy(fields()[0].schema(), other.firstname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastname)) {
        this.lastname = data().deepCopy(fields()[1].schema(), other.lastname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cip)) {
        this.cip = data().deepCopy(fields()[2].schema(), other.cip);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.idPharma)) {
        this.idPharma = data().deepCopy(fields()[4].schema(), other.idPharma);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'firstname' field.
      * @return The value.
      */
    public java.lang.String getFirstname() {
      return firstname;
    }


    /**
      * Sets the value of the 'firstname' field.
      * @param value The value of 'firstname'.
      * @return This builder.
      */
    public Prescription.Builder setFirstname(java.lang.String value) {
      validate(fields()[0], value);
      this.firstname = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'firstname' field has been set.
      * @return True if the 'firstname' field has been set, false otherwise.
      */
    public boolean hasFirstname() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'firstname' field.
      * @return This builder.
      */
    public Prescription.Builder clearFirstname() {
      firstname = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastname' field.
      * @return The value.
      */
    public java.lang.String getLastname() {
      return lastname;
    }


    /**
      * Sets the value of the 'lastname' field.
      * @param value The value of 'lastname'.
      * @return This builder.
      */
    public Prescription.Builder setLastname(java.lang.String value) {
      validate(fields()[1], value);
      this.lastname = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'lastname' field has been set.
      * @return True if the 'lastname' field has been set, false otherwise.
      */
    public boolean hasLastname() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'lastname' field.
      * @return This builder.
      */
    public Prescription.Builder clearLastname() {
      lastname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'cip' field.
      * @return The value.
      */
    public int getCip() {
      return cip;
    }


    /**
      * Sets the value of the 'cip' field.
      * @param value The value of 'cip'.
      * @return This builder.
      */
    public Prescription.Builder setCip(int value) {
      validate(fields()[2], value);
      this.cip = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'cip' field has been set.
      * @return True if the 'cip' field has been set, false otherwise.
      */
    public boolean hasCip() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'cip' field.
      * @return This builder.
      */
    public Prescription.Builder clearCip() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public double getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public Prescription.Builder setPrice(double value) {
      validate(fields()[3], value);
      this.price = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public Prescription.Builder clearPrice() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'idPharma' field.
      * @return The value.
      */
    public int getIdPharma() {
      return idPharma;
    }


    /**
      * Sets the value of the 'idPharma' field.
      * @param value The value of 'idPharma'.
      * @return This builder.
      */
    public Prescription.Builder setIdPharma(int value) {
      validate(fields()[4], value);
      this.idPharma = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'idPharma' field has been set.
      * @return True if the 'idPharma' field has been set, false otherwise.
      */
    public boolean hasIdPharma() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'idPharma' field.
      * @return This builder.
      */
    public Prescription.Builder clearIdPharma() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Prescription build() {
      try {
        Prescription record = new Prescription();
        record.firstname = fieldSetFlags()[0] ? this.firstname : (java.lang.String) defaultValue(fields()[0]);
        record.lastname = fieldSetFlags()[1] ? this.lastname : (java.lang.String) defaultValue(fields()[1]);
        record.cip = fieldSetFlags()[2] ? this.cip : (java.lang.Integer) defaultValue(fields()[2]);
        record.price = fieldSetFlags()[3] ? this.price : (java.lang.Double) defaultValue(fields()[3]);
        record.idPharma = fieldSetFlags()[4] ? this.idPharma : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Prescription>
    WRITER$ = (org.apache.avro.io.DatumWriter<Prescription>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Prescription>
    READER$ = (org.apache.avro.io.DatumReader<Prescription>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.firstname);

    out.writeString(this.lastname);

    out.writeInt(this.cip);

    out.writeDouble(this.price);

    out.writeInt(this.idPharma);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.firstname = in.readString();

      this.lastname = in.readString();

      this.cip = in.readInt();

      this.price = in.readDouble();

      this.idPharma = in.readInt();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.firstname = in.readString();
          break;

        case 1:
          this.lastname = in.readString();
          break;

        case 2:
          this.cip = in.readInt();
          break;

        case 3:
          this.price = in.readDouble();
          break;

        case 4:
          this.idPharma = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










